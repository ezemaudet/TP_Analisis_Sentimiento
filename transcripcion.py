# -*- coding: utf-8 -*-
"""transcripcion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jnwDy52wp1vQTIWUwGBGWIgH825xSe0u

**Transcripcion**
"""

# Ruta al archivo .env dentro de tu Google Drive

import os
import requests
from dotenv import load_dotenv
import pandas as pd
import whisper

dotenv_path = ".env.development"

load_dotenv(dotenv_path)

# Configuraci√≥n de la API
API_KEY = os.getenv("API_KEY_vozelia")
TENANT = os.getenv("TENANT_vozelia")
START_DATE = os.getenv("START_DATE")
END_DATE = os.getenv("END_DATE")
TIME= int (os.getenv("TIME"))
cant_grab = int (os.getenv("cant_grab"))

# URL para obtener los registros de llamadas en CSV
url = f"https://pbxone.vozelia.com.pa/pbx/proxyapi.php?key={API_KEY}&reqtype=INFO&info=CDRS&format=csv&tenant={TENANT}&start={START_DATE}&end={END_DATE}"

response = requests.get(url)

if response.status_code == 200:
    with open("llamadas.csv", "wb") as f:
        f.write(response.content)

    print("CDR descargado exitosamente.")

    # Cargar CSV en pandas para visualizar datos
    df = pd.read_csv("llamadas.csv")
    print(df.head())  # Mostrar las primeras filas

else:
    print("Error al obtener las llamadas:", response.text)

# 1. Convertir a datetime y calcular duraci√≥n
df['answer'] = pd.to_datetime(df['answer'], errors='coerce')
df['end'] = pd.to_datetime(df['end'], errors='coerce')
df['duracion_timedelta'] = df['end'] - df['answer']
df['duracion_segundos'] = df['duracion_timedelta'].dt.total_seconds()

# 2. Filtrar llamadas con duraci√≥n > XX segundos
df_filtrado = df[df['duracion_segundos'] > TIME].head(cant_grab).copy()
df_filtrado['transcripcion'] = None  # Crear columna vac√≠a para la transcripci√≥n

#model = whisper.load_model("medium")
model = whisper.load_model("base")

df_filtrado

# 3. Iterar sobre cada fila y procesar grabaci√≥n
for index, row in df_filtrado.iterrows():
    uniqueid = row['uniqueid']
    RECORDING_ID = uniqueid

    print(f"Descargando grabaci√≥n para uniqueid {uniqueid}...")

    url = f"https://pbxone.vozelia.com.pa/pbx/proxyapi.php?key={API_KEY}&reqtype=INFO&info=recording&id={RECORDING_ID}&tenant={TENANT}"

    response = requests.get(url)

    if response.status_code == 200:
        # Guardar temporalmente la grabaci√≥n
        with open("grabacion.wav", "wb") as f:
            f.write(response.content)

        print("‚úì Grabaci√≥n descargada. Iniciando transcripci√≥n...")

        try:
            result = model.transcribe("grabacion.wav", language="es")
            transcripcion = result["text"]
            df_filtrado.at[index, 'transcripcion'] = transcripcion
            print(f"‚úì Transcripci√≥n completada para {uniqueid}.")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al transcribir {uniqueid}: {e}")

        # Borrar el archivo de audio para ahorrar memoria
        os.remove("grabacion.wav")

    else:
        print(f"‚ùå Error al obtener grabaci√≥n de {uniqueid}: {response.text}")

# Mostrar un resumen
print("\nüìã Muestras con transcripciones:")
print(df_filtrado[['ID', 'uniqueid', 'duracion_segundos', 'transcripcion']].head())

# (Opcional) Guardar en CSV o sobrescribir `df`
df.update(df_filtrado[['transcripcion']])
df_filtrado.to_csv("transcripciones.csv", index=False)
